{"version":3,"sources":["components/table.js","serviceWorker.js","index.js"],"names":["Dashboard","state","mentor","localStorage","getItem","search","mentorName","document","getElementById","value","_this","setState","setItem","loadTable","load","flag","pairsArr","forEach","item","mentorGitArr","mentorGit","split","length","mentorStudentsArr","findMentorPairs","console","log","text","concat","students","i","studentGit","taskIndex","tasks","link","task","studentIndex","status","undefined","mark","PR","writeMark","querySelector","innerHTML","filter","pair","this","react_default","a","createElement","id","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","table","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3cb9980.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport pairsArr from '../data/data.json';\n\nclass Dashboard extends Component {\n  state = {\n    mentor: localStorage.getItem('mentor') || '...',\n  };\n\n  search = () => {\n    let mentorName = document.getElementById( 'entry-field' ).value;\n    this.setState(() => ({\n      mentor: mentorName,\n    }));\n    localStorage.setItem('mentor', mentorName);\n    this.loadTable(mentorName);\n  };\n\n  load = () => {\n    this.loadTable(this.state.mentor)\n  };\n\n  loadTable = (mentor) => {\n    let flag = false;\n    pairsArr.forEach((item) => {\n      const mentorGitArr = item.mentorGit.split('/');\n      if (mentorGitArr[mentorGitArr.length - 1] === mentor) {\n        flag = true;\n      }\n    });\n    if (!mentor || !flag) {\n      document.querySelector( '#table' ).innerHTML = '';\n      return ;\n    }\n\n    const mentorStudentsArr = this.findMentorPairs(mentor, pairsArr);\n    console.log('mentorStudentsArr', mentorStudentsArr);\n\n    let text =`<h1>Mentor ${mentorStudentsArr[0].mentor}</h1>`;\n\n    let students = `<table></tbody><tr><th></th>`;\n    for (let i = 0; i < mentorStudentsArr.length; i++) {\n      students += `<th>${mentorStudentsArr[i].studentGit}</th>`;\n    }\n    students +=`</tr>`;\n\n    for (let taskIndex = 0; taskIndex < mentorStudentsArr[0].tasks.length; taskIndex++) {\n      students += `<tr><td class=\"cell-task\"><a href=\"${mentorStudentsArr[0].tasks[taskIndex].link}\">${mentorStudentsArr[0].tasks[taskIndex].task}</a></td>`;\n      for (let studentIndex = 0; studentIndex < mentorStudentsArr.length; studentIndex++) {\n        if (mentorStudentsArr[studentIndex].tasks[taskIndex].status === \"Checked\" && mentorStudentsArr[studentIndex].tasks[taskIndex].mark === undefined) {\n          students += `<td class=\"cell-dark-red\"><a href=\"${mentorStudentsArr[studentIndex].tasks[taskIndex].PR}\">${this.writeMark(mentorStudentsArr[studentIndex].tasks[taskIndex].mark)}</a></td>`;\n        } else if (mentorStudentsArr[studentIndex].tasks[taskIndex].status === \"Checked\" || mentorStudentsArr[studentIndex].tasks[taskIndex].mark) {\n          students += `<td class=\"cell-green\"><a href=\"${mentorStudentsArr[studentIndex].tasks[taskIndex].PR}\">${this.writeMark(mentorStudentsArr[studentIndex].tasks[taskIndex].mark)}</a></td>`;\n        } else if (mentorStudentsArr[studentIndex].tasks[taskIndex].status === \"In Progress\") {\n          students += `<td class=\"cell-red\"><a href=\"${mentorStudentsArr[studentIndex].tasks[taskIndex].PR}\">${this.writeMark(mentorStudentsArr[studentIndex].tasks[taskIndex].mark)}</a></td>`;\n        } else if (mentorStudentsArr[studentIndex].tasks[taskIndex].status === \"Checking\") {\n          students += `<td class=\"cell-yellow\"><a href=\"${mentorStudentsArr[studentIndex].tasks[taskIndex].PR}\">${this.writeMark(mentorStudentsArr[studentIndex].tasks[taskIndex].mark)}</a></td>`;\n        } else if (mentorStudentsArr[studentIndex].tasks[taskIndex].status === \"ToDo\") {\n          students += `<td class=\"cell-grey\"><a href=\"${mentorStudentsArr[studentIndex].tasks[taskIndex].PR}\">${this.writeMark(mentorStudentsArr[studentIndex].tasks[taskIndex].mark)}</a></td>`\n        }\n      }\n      students += `</tr>`;\n    }\n    students += `</tbody></table>`;\n    text += students;\n    const mainElement = document.querySelector( '#table' );\n    mainElement.innerHTML = text;\n  };\n\n  writeMark = (mark) => {\n    if (mark === undefined) {\n      return '-';\n    }\n    return mark;\n  }\n\n  findMentorPairs = ( mentor, pairsArr ) => {\n    return pairsArr.filter( (pair) => {\n      const mentorGitArr = pair.mentorGit.split('/');\n      return mentorGitArr[mentorGitArr.length - 1] === mentor;\n    });\n  };\n\n  render() {\n    const { mentor } = this.state;\n    return (\n      <div id={\"main\"}>\n        <p>For example: amelk9n</p>\n        <input type={\"text\"} id={\"entry-field\"}></input>\n        <button onClick={this.search}>Search</button>\n        <p>The last visiter was {mentor}</p>\n        <button onClick={this.load}>Load the last visiter</button>\n        <div id={\"table\"}></div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from \"./components/table\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <Dashboard/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}